#=======================#
#--- booleans ----------#
#=======================#
@booleans@#cor-if-true	\\bif{\\btrue}{a}{b} = a
@booleans@#cor-if-false	\\bif{\\bfalse}{a}{b} = b
@booleans@#thm-if-same	\\bif{p}{a}{a} = a
@booleans@#thm-iffunc	\\bif{p}{f(u)}{f(v)} = f(\\bif{p}{u}{v})
@booleans@#thm-ifnest	\\bif{p}{\\bif{q}{a}{b}}{\\bif{q}{c}{d}} = \\bif{q}{\\bif{p}{a}{c}}{\\bif{p}{b}{d}}
@booleans@#thm-if-prune-true	\\bif{p}{\\bif{p}{a}{b}}{c} = \\bif{p}{a}{c}
@booleans@#thm-if-prune-false	\\bif{p}{a}{\\bif{p}{b}{c}} = \\bif{p}{a}{c}
@booleans@#thm-if-commute-true	\\bif{p}{\\bif{q}{a}{b}}{b} = \\bif{q}{\\bif{p}{a}{b}}{b}
@booleans@#thm-if-commute-false	\\bif{p}{a}{\\bif{q}{a}{b}} = \\bif{q}{a}{\\bif{p}{a}{b}}
@booleans@#thm-if-func-two	f(\\bif{p}{a}{b},\\bif{p}{c}{d}) = \\bif{p}{f(a,c)}{f(b,d)}
@booleans@#thm-eq-reflexive	\\beq(a,a) = \\btrue
@booleans@#thm-eq-symmetric	\\beq(a,b) = \\beq(b,a)
#=======================#
#--- not ---------------#
#=======================#
@not@#def-not	\\bnot(p) = \\bif{p}{\\bfalse}{\\btrue}
@not@#thm-not-true	\\bnot(\\btrue) = \\bfalse
@not@#thm-not-false	\\bnot(\\bfalse) = \\btrue
@not@#thm-not-involution	\\bnot(\\bnot(p)) = p	
@not@#thm-ifnot	\\bif{\\bnot(p)}{a}{b} = \bif{p}{b}{a}
#=======================#
#--- and ---------------#
#=======================#
@and@#def-and	\\band(p,q) = \\bif{p}{\\bif{q}{\\btrue}{\\bfalse}}{\\bfalse}
@and@#thm-and-eval-true-true	\\band(\\btrue,\\btrue) = \\btrue
@and@#thm-and-eval-true-false	\\band(\\btrue,\\bfalse) = \\bfalse
@and@#thm-and-eval-false-true	\\band(\\bfalse,\\btrue) = \\bfalse
@and@#thm-and-eval-false-false	\\band(\\bfalse,\\bfalse) = \\bfalse
@and@#thm-and-false-left	\\band(\\bfalse,p) = \\bfalse
@and@#thm-and-false-right	\\band(p,\\bfalse) = \\bfalse
@and@#thm-and-true-left	\\band(\\btrue,p) = p
@and@#thm-and-true-right	\\band(p,\\btrue) = p
@and@#thm-and-not	\\band(p,\\bnot(p)) = \\bfalse
@and@#thm-and-idempotent	\\band(p,p) = p
@and@#thm-and-commutative	\\band(p,q) = \\band(q,p)
@and@#thm-and-associative	\\band(\\band(p,q),r) = \\band(p,\\band(q,r))
@and@#thm-and-if-right	\\band(p,\\bif{p}{q}{r}) = \\band(p,q)
@and@#thm-and-if-hyp	\\bif{\\band(p,q)}{a}{b} = \bif{p}{\bif{q}{a}{b}}{b}
#=======================#
#--- or ----------------#
#=======================#
@or@#def-or	\\bor(p,q) = \\bif{p}{\\btrue}{\bif{q}{\\btrue}{\\bfalse}}
@or@#thm-or-eval-true-true	\\bor(\\btrue,\\btrue) = \\btrue
@or@#thm-or-eval-true-false	\\bor(\\btrue,\\bfalse) = \\btrue
@or@#thm-or-eval-false-true	\\bor(\\bfalse,\\btrue) = \\btrue
@or@#thm-or-eval-false-false	\\bor(\\bfalse,\\bfalse) = \\bfalse
@or@#thm-or-true-left	\\bor(\\btrue,p) = \\btrue
@or@#thm-or-true-right	\\bor(p,\\btrue) = \\btrue
@or@#thm-or-false-left	\\bor(\\bfalse,p) = p
@or@#thm-or-false-right	\\bor(p,\\bfalse) = p
@or@#thm-or-not	\\bor(p,\\bnot(p)) = \\btrue
@or@#thm-or-idempotent	\\bor(p,p) = p
@or@#thm-or-commutative	\\bor(p,q) = \\bor(q,p)
@or@#thm-or-associative	\\bor(\\bor(a,b),c) = \\bor(a,\\bor(b,c))
@or@#thm-demorgan-not-and	\\bnot(\\band(a,b)) = \\bor(\\bnot(a),\\bnot(b))
@or@#thm-demorgan-not-or	\\bnot(\\bor(a,b)) = \\band(\\bnot(a),\\bnot(b))
@or@#thm-and-or-distribute	\\band(a,\\bor(b,c)) = \\bor(\\band(a,b),\\band(a,c))
@or@#thm-or-and-distribute	\\bor(a,\\band(b,c)) = \\band(\\bor(a,b),\\bor(a,c))
@or@#thm-or-is-if	\\bor(p,q) = \\bif{p}{\btrue}{q}
@or@#thm-or-if-hyp	\\bif{\\bor(p,q)}{a}{b} = \\bif{p}{a}{\\bif{q}{a}{b}}
#=======================#
#--- implies -----------#
#=======================#
@implies@#def-implies	\\bimpl(p,q) = \\bif{p}{q}{\\btrue}
@implies@#thm-implies-or	\\bimpl(p,q) = \\bor(\\bnot(p),q)
@implies@#thm-implies-false-hyp	\\bimpl(\\bfalse,p) = \\btrue
@implies@#thm-implies-false-conc	\\bimpl(p,\\bfalse) = \\bnot(p)
@implies@#thm-implies-true-hyp	\\bimpl(\\btrue,p) = p
@implies@#thm-implies-true-conc	\\bimpl(p,\\btrue) = \\btrue
@implies@#thm-implies-self	\\bimpl(p,p) = \\btrue
@implies@#thm-implies-antisymmetric	\\bor(\\bimpl(p,q),\\bimpl(q,p)) = \\btrue
@implies@#thm-implies-left-commutative	\\bimpl(p,\\bimpl(q,r)) = \\bimpl(q,\\bimpl(p,r))
@implies@#thm-implies-transitive	\\bimpl(\\bimpl(p,q),\\bimpl(\\bimpl(q,r),\\bimpl(p,r))) = \\btrue
@implies@#thm-implies-distribute	\\bimpl(\\bimpl(p,\\bimpl(q,r)),\\bimpl(\\bimpl(p,q),\\bimpl(p,r))) = \\btrue
#=======================#
#--- functions ---------#
#=======================#
@functions@#def-id	\\id(x) = x
@functions@#def-compose	\\compose(g)(f)(x) = g(f(x))
@functions@#thm-compose-id-left	\\compose(\\id)(f) = f
@functions@#thm-compose-id-right	\\compose(f)(\\id) = f
@functions@#thm-compose-associative	\\compose(h)(\\compose(g)(f)) = \\compose(\\compose(h)(g))(f)
@functions@#def-const	\\const(b)(a) = b
@functions@#thm-compose-const-left	\\compose(\\const(c))(f) = \\const(c)
@functions@#def-flip	\\flip(f)(b)(a) = f(a)(b)
@functions@#thm-flip-involution	\\flip(\\flip(f)) = f
#=======================#
#--- predicates --------#
#=======================#
@predicates@#def-ptrue	\\ptrue = \\const(\\btrue)
@predicates@#def-pfalse	\\pfalse = \\const(\\bfalse)
@predicates@#def-pnot	\\pnot(p)(a) = \\bnot(p(a))
@predicates@#thm-pnot-involution	\\pnot(\\pnot(p)) = p
@predicates@#thm-pnot-ptrue	\\pnot(\\ptrue) = \\pfalse
@predicates@#thm-pnot-pfalse	\\pnot(\\bfalse) = \\btrue
@predicates@#thm-compose-bnot-ptrue	\\compose(\\bnot)(\\ptrue) = \\pfalse
@predicates@#thm-compose-bnot-pfalse	\\compose(\\bnot)(\\pfalse) = \\ptrue
@predicates@#def-pand	\\pand(p,q)(a) = \\band(p(a),q(a))
@predicates@#thm-pand-pfalse-left	\\pand(\\pfalse,p) = \\pfalse
@predicates@#thm-pand-pfalse-right	\\pand(p,\\pfalse) = \\pfalse
@predicates@#thm-pand-ptrue-left	\\pand(\\ptrue,p) = p
@predicates@#thm-pand-ptrue-right	\\pand(p,\\ptrue) = p
@predicates@#thm-pand-idempotent	\\pand(p,p) = p
@predicates@#thm-pand-commutative	\\pand(p,q) = \\pand(q,p)
@predicates@#thm-pand-associative	\\pand(\\pand(p,q),r) = \\pand(p,\\pand(q,r))
@predicates@#def-por	\\por(p,q)(a) = \\bor(p(a),q(a))
@predicates@#thm-por-ptrue-left	\\por(\\ptrue,p) = \\ptrue
@predicates@#thm-por-ptrue-right	\\por(p,\\ptrue) = \\ptrue
@predicates@#thm-por-pfalse-left	\\por(\\pfalse,p) = p
@predicates@#thm-por-pfalse-right	\\por(p,\\pfalse) = p
@predicates@#thm-por-idempotent	\\por(p,p) = p
@predicates@#thm-por-commutative	\\por(p,q) = \\por(q,p)
@predicates@#thm-por-associative	\\por(\\por(p,q),r) = \\por(p,\\por(q,r))
@predicates@#thm-demorgan-pnot-pand	\\pnot(\\pand(p,q)) = \\por(\\pnot(p),\\pnot(q))
@predicates@#thm-demorgan-pnot-por	\\pnot(\\por(p,q)) = \\pand(\\pnot(p),\\pnot(q))
@predicates@#thm-pand-por-distribute	\\pand(p,\\por(q,r)) = \\por(\\pand(p,q),\\pand(p,r))
@predicates@#thm-por-pand-distribute	\\por(p,\\pand(p,r)) = \\pand(\\por(p,q),\\por(p,r))
@predicates@#def-pimpl	\\pimpl(p,q)(a) = \bimpl(p(a),q(a))
#=======================#
#--- disjoint-unions ---#
#=======================#
@disjoint-unions@#dfn-disjoint-unions-isRgt	\\isRgt = \\either(\\const(\\bfalse),\\const(\\btrue))
@disjoint-unions@#dfn-disjoint-unions-isLft	\\isLft = \\either(\\const(\\btrue),\\const(\\bfalse))
@disjoint-unions@#thm-disjoint-unions-isLft-lft	\\isLft(\\lft(a)) = \\btrue
@disjoint-unions@#thm-disjoint-unions-isLft-rgt	\\isLft(\\rgt(b)) = \\bfalse
@disjoint-unions@#thm-disjoint-unions-isRgt-lft	\\isRgt(\\lft(a)) = \\bfalse
@disjoint-unions@#thm-disjoint-unions-isRgt-rgt	\\isRgt(\\rgt(b)) = \\btrue
#=======================#
#--- unary -------------#
#=======================#
@unary@#thm-prev-zero	\\prev(\\zero) = \\zero
@unary@#thm-prev-next	\\prev(\\next(a)) = a
@unary@#thm-iszero-zero	\\iszero(\\zero) = \\btrue
@unary@#thm-iszero-next	\\iszero(\\next(a)) = \\bfalse
#=======================#
#--- plus --------------#
#=======================#
@plus@#cor-plus-up-zero	\\nplus(\\zero,b) = b
@plus@#cor-plus-up-next	\\nplus(\\next(a),b) = \\next(\\nplus(a,b))
@plus@#thm-plus-zero-right	\\nplus(a,\\zero) = a
@plus@#thm-plus-next-right	\\nplus(a,\\next(b)) = \\next(\\nplus(a,b))
@plus@#thm-plus-associative	\\nplus(\\nplus(a,b),c) = \\nplus(a,\\nplus(b,c))
@plus@#thm-plus-commutative	\\nplus(a,b) = \\nplus(b,a)
#=======================#
#--- times -------------#
#=======================#
@times@#cor-times-up-zero	\\ntimes(\\zero,b) = \\zero
@times@#cor-times-up-next	\\ntimes(\\next(a),b) = \\nplus(\\ntimes(a,b),b)
@times@#thm-times-zero-right	\\ntimes(a,\\zero) = \\zero
@times@#thm-times-next-right	\\ntimes(a,\\next(b)) = \\nplus(\\ntimes(a,b),a)
@times@#thm-times-one-left	\\ntimes(\\next(\\zero),a) = a
@times@#thm-times-one-right	\\ntimes(a,\\next(\\zero)) = a
@times@#thm-times-commutative	\\ntimes(a,b) = \\ntimes(b,a)
@times@#thm-times-plus-distribute-left	\\ntimes(a,\\nplus(b,c)) = \\nplus(\\ntimes(a,b),\\ntimes(a,c))
@times@#thm-times-plus-distribute-right	\\ntimes(\\nplus(a,b),c) = \\nplus(\\ntimes(a,c),\\ntimes(b,c))
#=======================#
#--- minus -------------#
#=======================#
@minus@#cor-minus-up-zero	\\nminus(\\zero,b) = \\bif{\\iszero(b)}{\\rgt(\\zero)}{\\lft(\\ast)}
@minus@#cor-minus-up-next	\\nminus(\\next(a),b) = \\bif{\\iszero(b)}{\\rgt(\\next(a))}{\\nminus(a,\\prev(b))}
@minus@#thm-minus-nat-zero	\\nminus(a,\\zero) = \\rgt(a)
@minus@#thm-minus-zero-next	\\nminus(\\zero,\\next(a)) = \\lft(\\ast)
@minus@#thm-minus-next-cancel	\\nminus(\\next(a),\\next(b)) = \\nminus(a,b)
@minus@#thm-minus-next-self	\\nminus(a,\\next(a)) = \\lft(\\ast)
#=======================#
#--- leq ---------------#
#=======================#
@leq@#dfn-leq	\\nleq(a,b) = \\isRgt(\\nminus(b,a))
